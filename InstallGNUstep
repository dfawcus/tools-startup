#!/bin/sh
#
#  Copyright (C) 2005 Free Software Foundation, Inc.
#
#  Written by:	Adam Fedor <fedor@gnu.org>
#
#  This package is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public
#  License along with this package; if not, write to the Free
#  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
#
#--------------------------------------------------------------------
#
# This is a simple script used to setup and compile the GNUstep core
# packages. It runs a configure script to check the system and then
# compiles and installs the packages if all the prerequisites are 
# satisfied. To run this script, at the command line, type
#
# InstallGNUstep

#--------------------------------------------------------------------
# Check the shell. Do a few checks on how the shell behaves, so that we
# can run and display things properly.
#--------------------------------------------------------------------
case `echo "testing\c"; echo 1,2,3`,`echo -n testing; echo 1,2,3` in
  *c*,-n*) ECHO_N= ECHO_C='
' ECHO_T='      ' ;;
  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
esac


#--------------------------------------------------------------------
# Misc setup. Set the default source, build, and install directories.
# Also source the sub-scripts that contain functions that we need.
#--------------------------------------------------------------------

SRCDIR=`pwd`
BUILDDIR=$SRCDIR/build
SOURCESDIR=$SRCDIR/sources

# Make sure GNUSTEP_SYSTEM_ROOT has a /System at the end
# in case the user set it themselves.
if test -n "$GNUSTEP_SYSTEM_ROOT"; then
  if test \! "`basename $GNUSTEP_SYSTEM_ROOT`" = System; then
    if test "x$GNUSTEP_SYSTEM_ROOT" = "x/"; then
      GNUSTEP_SYSTEM_ROOT=/System
    else
      GNUSTEP_SYSTEM_ROOT="$GNUSTEP_SYSTEM_ROOT/System"
    fi
  fi
fi

. scripts/common.sh
. scripts/platform.sh

gs_platform

if test -z "$LIBRARY_COMBO"; then
  LIBRARY_COMBO=gnu-gnu-gnu
fi

if [ -z "$MAKE" ]; then
  if gmake -v >/dev/null 2>&1
  then
    MAKE=gmake
  else
    MAKE=make
  fi
fi

#--------------------------------------------------------------------
# Welcome
#--------------------------------------------------------------------
clear
echo
echo
echo
echo "                          GNUstep Installation"
echo
echo
echo "     This is an automatic installation script for GNUstep."
echo 
echo "This script tries to build and install the core libraries for"
echo "GNUstep. Log files of the build process are kept so that if some"
echo "part of the build does not work, you can send the log files to"
echo "our attention (at bug-gnustep@gnu.org). From these we can try to"
echo "determine what the problem is."
echo
echo

#--------------------------------------------------------------------
# Check how we can install. If we are running as root, just go
# ahead. Otherwise ask the user if they can install via sudo or if
# they just want to try it in their home directory.
#--------------------------------------------------------------------
HAVE_SUDO=no
NO_PRIV=no
WHOAMI=none
which whoami 2>&1 > /dev/null
if [ $? = 0 ]; then
  WHOAMI=`whoami`
elif [ -f /usr/ucb/whoami ]; then
  WHOAMI=`/usr/ucb/whoami`
else
  WHOAMI=`who am i | awk '{print $1}'`
fi
which sudo > /dev/null
if [ $? = 0 ]; then
  HAVE_SUDO=yes
fi
AS_ROOT=yes
if [ "$WHOAMI" != root ]; then
  AS_ROOT=no
  echo WARNING: You are not logged in as root
  echo
  echo GNUstep needs to be installed with root privileges. If you
  echo do not have root privileges, you can also install GNUstep if
  echo you have sudo access or you can install it in your home
  echo directory. If you have no idea what any of this means, you
  echo "should choose option two (2) below (or quit (option 9) and read "
  echo "your computer manual on installing programs as root)."
  echo
  echo "1) I have sudo access in order to install GNUstep"
  echo "2) I want to install GNUstep in my home directory"
  echo "3) I know what I'm doing and I don't need special permissions"
  echo "9) I want to quit and start over."
  echo $ECHO_N "Enter a number: $ECHO_C"
  read user_option
  case "$user_option" in
    1) if [ $HAVE_SUDO = no ]; then
         echo Cannot find sudo program. Make sure it is in your path
         exit 1
       fi;;
    2) GNUSTEP_SYSTEM_ROOT=$HOME/GNUstep/System
       export GNUSTEP_SYSTEM_ROOT
       NO_PRIV=yes
       HAVE_SUDO=no;;
    3) echo Installing as normal user in $GNUSTEP_SYSTEM_ROOT
       NO_PRIV=yes
       HAVE_SUDO=no;;
    *) exit 0;;
  esac
else
  echo $ECHO_N "Press the Return/Enter key to begin continue: $ECHO_C"
  read user_enter
  if [ "$user_enter" = q ]; then
    exit 0
  fi
fi

if [ $AS_ROOT = no -a $HAVE_SUDO = yes ]; then
  echo "***You will be prompted for a sudo password during installation ***"
fi

#--------------------------------------------------------------------
# Find GNUstep sources. Check first if there is a 'core' directory
# at the same level as us. If so, we are compiling from CVS sources.
# Otherwise check in the 'sources' subdirectory for all the packages
# we need.
#--------------------------------------------------------------------
if [ -d $SOURCESDIR ]; then
  FOUND_FFCALL=yes
  FFCALL=`find $SOURCESDIR -name ffcall-1*`
  if [ x$FFCALL = x ]; then
    FOUND_FFCALL=no
  else
    FFCALL=`basename $FFCALL .tar.gz`
  fi
  FOUND_LIBOBJC=yes
  LIBOBJC=`find $SOURCESDIR -name gnustep-objc*`
  if [ x$LIBOBJC = x ]; then
    FOUND_LIBOBJC=no
  else
    LIBOBJC=`basename $LIBOBJC .tar.gz`
  fi
else
  FOUND_FFCALL=no
  FOUND_LIBOBJC=no
fi

FOUND_SOURCES=yes
IS_CVS=no
if [ -d $SRCDIR/../core ]; then
  # Compile from CVS checkout
  IS_CVS=yes
  SOURCESDIR=$SRCDIR/../core
  BUILDDIR=$SOURCESDIR
  GMAKE=make
  GBASE=base
  GGUI=gui
  GBACK=back
  echo Compiling packages from CVS
else
  # Compile from tar.gz
  GMAKE=`find $SOURCESDIR -name gnustep-make*`
  if [ x$GMAKE = x ]; then
    echo Cannot find gnustep-make distribution
    FOUND_SOURCES=no
  fi
  GMAKE=`basename $GMAKE .tar.gz`
  GBASE=`find $SOURCESDIR -name gnustep-base*`
  if [ x$GBASE = x ]; then
    echo Cannot find gnustep-base distribution
    FOUND_SOURCES=no
  fi
  GBASE=`basename $GBASE .tar.gz`
  GGUI=`find $SOURCESDIR -name gnustep-gui*`
  if [ x$GGUI = x ]; then
    echo Cannot find gnustep-gui distribution
    FOUND_SOURCES=no
  fi
  GGUI=`basename $GGUI .tar.gz`
  GBACK=`find $SOURCESDIR -name gnustep-back*`
  if [ x$GBACK = x ]; then
    echo Cannot find gnustep-back distribution
    FOUND_SOURCES=no
  fi
  GBACK=`basename $GBACK .tar.gz`
fi

#--------------------------------------------------------------------
# Create the build directory if it does not already
# exist.
#--------------------------------------------------------------------
if [ \! -d $BUILDDIR ]; then
  mkdir $BUILDDIR
fi
if [ \! -d $BUILDDIR ]; then
  echo "************************************************************"
  echo "Cannot create the build directory $BUILDDIR."
  echo "trying to build in /tmp/gnustep"
  BUILDDIR=/tmp/gnustepbuild
  mkdir $BUILDDIR
fi
if [ \! -d $BUILDDIR ]; then
  echo "************************************************************"
  echo "Cannot create the build directory $BUILDDIR."
  echo "trying to build in your home directory...."
  BUILDDIR=$HOME/gnustepbuild
  mkdir $BUILDDIR
  if [ ! -d $BUILDDIR ]; then
    echo "No. that doesn't work either. Contact bug-gnustep@gnu.org for help"
    exit 1
  fi
fi
  
cd $BUILDDIR
if [ \! -d logs ]; then
  mkdir logs
fi
rm -f logs.tar.gz
exec 5>logs/installgnustep.log
echo "Install log for the InstallGNUstep script" >&5
echo "Source files:" >&5
echo " CVS: $IS_CVS " >&5
echo $GMAKE >&5
echo $GBASE >&5
echo $GGUI >&5
echo $GBACK >&5
echo "" >&5

if [ $FOUND_SOURCES = no ]; then
  echo "******** Source files not found **********"
  echo "The sources directory in this package had no source packages"
  echo "which should have all the proper gnustep tar.gz files"
  echo "(e.g. gnustep-make-x.x.x.tar.gz)"
  echo "Contact bug-gnustep@gnu.org for help"
  echo "Source files not found. STOP" >&5
  exit 1
fi

#--------------------------------------------------------------------
# Configure. Run the configure script which checks the system out.
#--------------------------------------------------------------------
echo "******** Checking system for installation issues **********"
echo "Configuring for $gs_machine" >&5
echo "Configuring for $gs_machine"
gs_flags
PKG_CPPFLAGS=CPPFLAGS=$GS_CPPFLAGS
PKG_LDFLAGS=LDFLAGS=$GS_LDFLAGS
echo $PKG_CPPFLAGS >&5
echo $PKG_CPPFLAGS
echo $PKG_LDFLAGS >&5
echo $PKG_LDFLAGS

echo "" >&5
echo "$SRCDIR/configure --with-library-combo=$LIBRARY_COMBO $PKG_CPPFLAGS $PKG_LDFLAGS" >&5
$SRCDIR/configure --with-library-combo=$LIBRARY_COMBO $PKG_CPPFLAGS $PKG_LDFLAGS

# Now print out a report for the user describing any problems with their
# system that we found.
cp config.log logs/00-config.log
cp $SRCDIR/setuperrors .
cp $SRCDIR/ErrorList .
cp $SRCDIR/ErrorList.awk .
./setuperrors
if [ $? != 0 ]; then
  rm -f logs.tar.gz
  tar -cf logs.tar logs
  gzip logs.tar
  echo "If you don't understand something or think a test is in error"
  echo "Please email bug-gnustep@gnu.org and send the $BUILDDIR/logs.tar.gz file"
  exit 1
fi

# Read in the current setup. Check the versions of the installed packages 
# against the ones we have and ask the user if there is a discrepancy.
. setupvars
if [ $IS_CVS = yes ]; then
  CURRENT_MAKE_VERSION=CVS
  CURRENT_BASE_VERSION=CVS
  CURRENT_GUI_VERSION=CVS
else
  CURRENT_MAKE_VERSION=`echo $GMAKE | sed "s/.*-\([0-9.]\)/\1/"`
  CURRENT_BASE_VERSION=`echo $GBASE | sed "s/.*-\([0-9.]\)/\1/"`
  CURRENT_GUI_VERSION=`echo $GGUI | sed "s/.*-\([0-9.]\)/\1/"`
fi
do_upgrade_make=no
do_upgrade_base=no
do_upgrade_gui=no
if [ "$GNUSTEP_MAKE_VERSION" != 0 ]; then
  echo Current GNUstep Make version is $GNUSTEP_MAKE_VERSION
  if [ $GNUSTEP_MAKE_VERSION != $CURRENT_MAKE_VERSION ]; then
    do_upgrade_make=yes
  fi
fi
if [ $GNUSTEP_BASE_VERSION != 0 ]; then
  echo Current GNUstep Base version is $GNUSTEP_BASE_VERSION
  if [ $GNUSTEP_BASE_VERSION != $CURRENT_BASE_VERSION ]; then
    do_upgrade_base=yes
  fi
fi
if [ $GNUSTEP_GUI_VERSION != 0 ]; then
  echo Current GNUstep Gui version is $GNUSTEP_GUI_VERSION
  if [ $GNUSTEP_GUI_VERSION != $CURRENT_GUI_VERSION ]; then
    do_upgrade_gui=yes
  fi
fi
echo "This package installs these versions of the GNUstep libraries:"
echo "  GNUstep Make: $CURRENT_MAKE_VERSION"
echo "  GNUstep Base: $CURRENT_BASE_VERSION"
echo "  GNUstep Gui: $CURRENT_GUI_VERSION"
if [ $do_upgrade_make = yes -o $do_upgrade_base = yes -o $do_upgrade_gui = yes ]; then
  echo You have some GNUstep packages installed already which are not the
  echo same version as the ones that we will be installing. Do you want to
  echo "upgrade your packages? (Say no if you want to keep the packages you"
  echo "currently have installed)"
  echo $ECHO_N "Install new versions? (y or n): $ECHO_C"
  read user_option
  if [ "$user_option" = n -o  "$user_option" = N -o "$user_option" = no -o "$user_option" = NO -o "$user_option" = No ]; then
    do_upgrade_make=no
    do_upgrade_base=no
    do_upgrade_gui=no
  fi
fi

echo "Upgrade options:" >&5
echo " make $do_upgrade_make" >&5
echo " base $do_upgrade_base" >&5
echo " gui  $do_upgrade_gui" >&5

echo "" >&5
echo ""
echo Building in $BUILDDIR >&5
echo Building in $BUILDDIR
if [ x$GNUSTEP_SYSTEM_ROOT = x ]; then
  echo "Installing in default location (usually /usr/GNUstep)" >&5
  echo "Installing in default location (usually /usr/GNUstep)"
else
  echo Installing in $GNUSTEP_SYSTEM_ROOT >&5
  echo Installing in $GNUSTEP_SYSTEM_ROOT
fi
echo Library combo: $LIBRARY_COMBO >&5
echo Library combo: $LIBRARY_COMBO
echo "" >&5
echo ""

if [ "$FFCALL_INSTALLED" = no -a "$LIBFFI_INSTALLED" = no -a "$FOUND_FFCALL" = no ]; then
  echo "******** Source files not found **********"
  echo "Make sure there is a directory one level above this script directory"
  echo "named sources and that it has ffcall-1.8d.tar.gz present"
  echo "Download this file from ftp://ftp.gnustep.org/pub/gnustep/dev-libs"
  echo "Source files not found. STOP" >&5
  exit 1
fi

echo $ECHO_N "Press the Return/Enter key to begin building GNUstep: $ECHO_C"
read user_enter
if [ "$user_enter" = q ]; then
  echo "User Stop " >&5
  exit 0
fi
echo

#--------------------------------------------------------------------
# GNUstep make
#--------------------------------------------------------------------

PLOG=01-make
PKG=$GMAKE
PKG_DISPLAY="GNUstep Make"
PKG_CONFIG=--with-library-combo=$LIBRARY_COMBO
if [ $GNUSTEP_INSTALLED = yes -a $do_upgrade_make = no ];then
  echo GNUstep Make already installed >&5
  echo GNUstep Make already installed
else
  gs_build_package
fi

if [ x$GNUSTEP_SYSTEM_ROOT = x ]; then
  GNUSTEP_SYSTEM_ROOT=$GNUSTEP_SYSTEM_ROOT_CONFIG
fi

if [ \! -f $GNUSTEP_SYSTEM_ROOT/Library/Makefiles/GNUstep.sh ]; then
  gs_log_error
  exit 1
fi

# Reset the environment, just to make sure it's clean.
if [ \! -f $GNUSTEP_SYSTEM_ROOT/Library/Makefiles/GNUstep-reset.sh ]; then
    gs_save=$GNUSTEP_SYSTEM_ROOT
    . $GNUSTEP_SYSTEM_ROOT/Library/Makefiles/GNUstep-reset.sh
    GNUSTEP_SYSTEM_ROOT=$gs_save
    unset gs_save
fi
. $GNUSTEP_SYSTEM_ROOT/Library/Makefiles/GNUstep.sh

#--------------------------------------------------------------------
# Build pre-reqs
#--------------------------------------------------------------------
HAVE_RPM=no
which rpm > /dev/null
if [ $? = 0 ]; then
  HAVE_RPM=yes
fi
if [ x"$NORPM" = xyes ]; then
  HAVE_RPM=no
fi

PLOG=02-ffcall
PKG=$FFCALL
PKG_DISPLAY="ffcall"
PKG_CONFIG="--prefix=$GNUSTEP_SYSTEM_ROOT \
   --libdir=$GNUSTEP_SYSTEM_ROOT/Library/Libraries \
   --includedir=$GNUSTEP_SYSTEM_ROOT/Library/Headers"

REBUILD_MAKE=no
#Why is this here?
#if [ $NO_PRIV = yes ]; then
#  # Force install
#  FFCALL_INSTALLED=no
#fi
if [ $FFCALL_INSTALLED = yes ];then
  echo ffcall already installed >&5
  echo ffcall already installed
elif [ $LIBFFI_INSTALLED = yes ];then
  echo libffi already installed >&5
  echo libffi already installed
else
  gs_build_package
  REBUILD_MAKE=yes
fi

PLOG=02-libobjc
PKG=$LIBOBJC
PKG_DISPLAY="libobjc"
PKG_CONFIG=NO
if [ $GCC_VERSION = 2 ]; then
  # Need to install our own version of libobjc
  if [ $GNUSTEP_CUSTOM_LIBOBJC != "NONE" ]; then
    echo Custom libobjc already installed >&5
    echo Custom libobjc already installed
  elif [ $FOUND_LIBOBJC = no ]; then
    echo Warning: Could not find gnustep-objc sources to install >&5
    echo Warning: Could not find gnustep-objc sources to install
  else
  gs_build_package
  REBUILD_MAKE=yes
  fi
  # Need to check if libobjc and ffcall got installed...
  if [ \! -f $GNUSTEP_SYSTEM_ROOT/Library/Headers/objc/Object.h ]; then
    gs_log_error
    exit 1
  fi
fi

#--------------------------------------------------------------------
# GNUstep make
#--------------------------------------------------------------------

PLOG=03-make
PKG=$GMAKE
PKG_DISPLAY="GNUstep Make"
PKG_CONFIG=--with-library-combo=$LIBRARY_COMBO
if [ $REBUILD_MAKE = no ];then
  echo No need to update GNUstep Make >&5
  echo No need to update GNUstep Make
else
  gs_build_package
fi

if [ \! -f $GNUSTEP_SYSTEM_ROOT/Library/Makefiles/GNUstep.sh ]; then
  gs_log_error
  exit 1
fi

#--------------------------------------------------------------------
# GNUstep base
#--------------------------------------------------------------------

PLOG=04-base
PKG=$GBASE
PKG_DISPLAY="GNUstep Base"
PKG_CONFIG=
if [ "$GNUSTEP_BASE_INSTALLED" = yes -a $do_upgrade_base = no ]; then
  echo $PKG_DISPLAY already installed >&5
  echo $PKG_DISPLAY already installed
else
  gs_build_package
fi

HEADER_CHECK=$GNUSTEP_SYSTEM_ROOT/Library/Headers/Foundation/NSObject.h
if [ \! -f $HEADER_CHECK ]; then
  gs_log_error
  exit 1
fi

#--------------------------------------------------------------------
# GNUstep gui
#--------------------------------------------------------------------

PLOG=05-gui
PKG=$GGUI
PKG_DISPLAY="GNUstep Gui"
PKG_CONFIG=
if [ "$GNUSTEP_GUI_INSTALLED" = yes -a $do_upgrade_gui = no ]; then
  echo $PKG_DISPLAY already installed >&5
  echo $PKG_DISPLAY already installed
else
  gs_build_package
fi

HEADER_CHECK=$GNUSTEP_SYSTEM_ROOT/Library/Headers/AppKit/NSApplication.h
if [ \! -f $HEADER_CHECK ]; then
  gs_log_error
  exit 1
fi

#--------------------------------------------------------------------
# GNUstep back
#--------------------------------------------------------------------

PLOG=06-back
PKG=$GBACK
PKG_DISPLAY="GNUstep Back"
PKG_CONFIG=
if [ "$GNUSTEP_BACK_INSTALLED" = yes  -a $do_upgrade_gui = no ]; then
  echo $PKG_DISPLAY already installed >&5
  echo $PKG_DISPLAY already installed
else
  gs_build_package
fi

if [ \! -d $GNUSTEP_SYSTEM_ROOT/Library/Bundles/libgnustep-back.bundle ]; then
  gs_log_error
  exit 1
fi

#--------------------------------------------------------------------
# Finish 
#--------------------------------------------------------------------

echo "" >&5
echo "Instalation Finished" >&5
echo "---------------------------------------------------------"
echo
echo Installation Finished
echo
echo "---------------------------------------------------------"
echo
echo "Now run the GNUstep initialization script (put this in your"
echo ".bashrc or other type of startup script). Note the '.' at the"
echo "beginning of the line."
echo ". $GNUSTEP_SYSTEM_ROOT/Library/Makefiles/GNUstep.sh"
echo
echo "Now you can install some applications and start using GNUstep"
echo "Look for a few applications in the AppSources directory. The"
echo "typical way to install an application is:"
echo "  tar -zxf MyApplication.tar.gz"
echo "  cd MyApplication"
echo "  make"
echo "  make install (as root, unless GNUstep is in your home dir)"
echo ""
echo "Then start the application:"
echo "  openapp MyApplication.app"
echo ""

